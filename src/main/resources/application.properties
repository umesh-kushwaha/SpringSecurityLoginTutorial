# ===============================
# = DATA SOURCE for MYSQL
# ===============================
#spring.datasource.url = jdbc:mysql://localhost:3306/spring-security-tutorial
#spring.datasource.username = root
#spring.datasource.password = admin
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = DATA SOURCE for PostGreSQL
# ===============================

# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5432/spring-security-tutorial
spring.datasource.username=postgres
spring.datasource.password=test@12345
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
#spring.jpa.hibernate.ddl-auto=create-drop
# ===============================
# = JPA / HIBERNATE for postgresql
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# = JPA / HIBERNATE for mysql
# ===============================
#spring.jpa.show-sql = true
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select email, password, active from user_tbl where email=?
spring.queries.roles-query=select u.email, r.role from user_tbl u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?